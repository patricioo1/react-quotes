{"version":3,"sources":["components/RandomQuoteAPI.js","App.js","reportWebVitals.js","index.js"],"names":["RandomQuoteAPI","useState","data","setData","quote","setQuote","history","setHistory","api","useEffect","fetch","then","response","json","dataIndex","Math","floor","random","length","catch","console","log","nextRandomQuote","useCallback","prevQuote","e","preventDefault","previousQuote","className","onClick","author","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAoDeA,EAlDQ,WACnB,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAcN,mBAAS,yIAAhBO,EAAP,oBAEAC,qBAAU,WACNC,MAAMF,GACLG,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAT,GACFC,EAAQD,GACR,IAAMY,EAAYZ,EAAOa,KAAKC,MAAMD,KAAKE,SAAWf,EAAKgB,QAAU,KACnEb,EAASH,EAAKY,OAEjBK,OAAM,WACHC,QAAQC,IAAI,cAEjB,CAACb,IAEJ,IAAMc,EAAkBC,uBAAY,WAChC,IAAMT,EAAYZ,EAAOa,KAAKC,MAAMD,KAAKE,SAAWf,EAAKgB,QAAU,KACnEb,EAASH,EAAKY,IACdP,EAAW,GAAD,mBAAKD,GAAL,CAAcF,KACxBgB,QAAQC,IAAIf,KACb,CAACJ,EAAMI,EAASF,IAEboB,EAAYD,uBAAY,SAACE,GAC3B,GAAuB,IAAnBnB,EAAQY,OACRO,EAAEC,qBACC,CACH,IAAMC,EAAgBrB,EAAQA,EAAQY,OAAS,GAC/Cb,EAASsB,MAEd,CAACrB,IAGJ,OADAc,QAAQC,IAAIf,GAER,sBAAKsB,UAAU,eAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,wBAAQC,QAAS,SAACJ,GAAD,OAAOD,EAAUC,IAAlC,wBACA,wBAAQI,QAAS,kBAAMP,KAAvB,gCAEN,4BAAIlB,EAAMA,QACV,4BAAIA,EAAM0B,aCpCLC,MARf,WACE,OACE,qBAAKH,UAAU,MAAf,SACE,cAAC,EAAD,OCMSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d11299e.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\n\r\nconst RandomQuoteAPI = () => {\r\n    const [data, setData] = useState();\r\n    const [quote, setQuote] = useState(0);\r\n    const [history, setHistory] = useState([])\r\n    const [api] = useState('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json');\r\n\r\n    useEffect(() => {\r\n        fetch(api)\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(data => {\r\n            setData(data)\r\n            const dataIndex = data ? Math.floor(Math.random() * data.length) : null;\r\n            setQuote(data[dataIndex])\r\n        })\r\n        .catch(() => {\r\n            console.log('error');\r\n        })\r\n    }, [api])\r\n\r\n    const nextRandomQuote = useCallback(() => {\r\n        const dataIndex = data ? Math.floor(Math.random() * data.length) : null;\r\n        setQuote(data[dataIndex]);\r\n        setHistory([...history, quote])\r\n        console.log(history);\r\n    }, [data, history, quote])\r\n\r\n    const prevQuote = useCallback((e) => {\r\n        if (history.length === 0) {\r\n            e.preventDefault();\r\n        } else {\r\n            const previousQuote = history[history.length - 1]\r\n            setQuote(previousQuote)\r\n        }\r\n    }, [history])\r\n\r\n    console.log(history);\r\n    return (\r\n        <div className='random-quote'>\r\n            <div className=\"next-prev-buttons\">\r\n                <button onClick={(e) => prevQuote(e)}>Prev quote</button>\r\n                <button onClick={() => nextRandomQuote()}>Draw next quote</button>\r\n            </div>\r\n          <p>{quote.quote}</p>\r\n          <p>{quote.author}</p>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default RandomQuoteAPI;","import RandomQuoteAPI from \"./components/RandomQuoteAPI\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RandomQuoteAPI/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}